value = (*
	The class A2I provides integer-to-string and string-to-integer
	conversion routines.  To use these routines, either inherit them
	in the class where needed, have a dummy variable bound to
	something of type A2I, or simpl write (new A2I).method(argument).
*), type = TokenType.COMMENT
value = (*
	c2i   Converts a 1-character string to an integer.  Aborts
	if the string is not "0" through "9"
*), type = TokenType.COMMENT
value = class, type = TokenType.CLASS
value = A2I, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = c2i, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = char, type = TokenType.ID
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "0", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 0, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "1", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 1, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "2", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 2, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "3", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 3, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "4", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 4, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "5", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 5, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "6", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 6, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "7", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 7, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "8", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 8, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = char, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = "9", type = TokenType.STRING
value = then, type = TokenType.THEN
value = 9, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = abort, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = 0, type = TokenType.INTEGER
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = -- the 0 is needed to satisfy the typchecker, type = TokenType.COMMENT
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = (*
   i2c is the inverse of c2i.
*), type = TokenType.COMMENT
value = i2c, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 0, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "0", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 1, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "1", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 2, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "2", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 3, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "3", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 4, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "4", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 5, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "5", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 6, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "6", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 7, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "7", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 8, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "8", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 9, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "9", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = abort, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = "", type = TokenType.STRING
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = -- the "" is needed to satisfy the typchecker, type = TokenType.COMMENT
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = (*
	a2i converts an ASCII string into an integer.  The empty string
	is converted to 0.  Signed and unsigned strings are handled.  The
	method aborts if the string does not represent an integer.  Very
	long strings of digits produce strange answers because of arithmetic
	overflow.
*), type = TokenType.COMMENT
value = a2i, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = s, type = TokenType.ID
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = if, type = TokenType.IF
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = length, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = =, type = TokenType.EQUAL
value = 0, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = 0, type = TokenType.INTEGER
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = substr, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = 0, type = TokenType.INTEGER
value = ,, type = TokenType.COMMA
value = 1, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = =, type = TokenType.EQUAL
value = "-", type = TokenType.STRING
value = then, type = TokenType.THEN
value = ~, type = TokenType.TILDE
value = a2i_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = substr, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = 1, type = TokenType.INTEGER
value = ,, type = TokenType.COMMA
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = length, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = -, type = TokenType.MINUS
value = 1, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = substr, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = 0, type = TokenType.INTEGER
value = ,, type = TokenType.COMMA
value = 1, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = =, type = TokenType.EQUAL
value = "+", type = TokenType.STRING
value = then, type = TokenType.THEN
value = a2i_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = substr, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = 1, type = TokenType.INTEGER
value = ,, type = TokenType.COMMA
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = length, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = -, type = TokenType.MINUS
value = 1, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = else, type = TokenType.ELSE
value = a2i_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = s, type = TokenType.ID
value = ), type = TokenType.RIGHT_PARENTHESIS
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = (*
 	 a2i_aux converts the usigned portion of the string.  As a programming
	example, this method is written iteratively.
*), type = TokenType.COMMENT
value = a2i_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = s, type = TokenType.ID
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = int, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = 0, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = {, type = TokenType.LEFT_CURLY_BRACE
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = j, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = length, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = in, type = TokenType.IN
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = i, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = 0, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = while, type = TokenType.WHILE
value = i, type = TokenType.ID
value = <, type = TokenType.LESS_THAN
value = j, type = TokenType.ID
value = loop, type = TokenType.LOOP
value = {, type = TokenType.LEFT_CURLY_BRACE
value = int, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = int, type = TokenType.ID
value = *, type = TokenType.TIMES
value = 10, type = TokenType.INTEGER
value = +, type = TokenType.PLUS
value = c2i, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = s, type = TokenType.ID
value = ., type = TokenType.DOT
value = substr, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = ,, type = TokenType.COMMA
value = 1, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = i, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = i, type = TokenType.ID
value = +, type = TokenType.PLUS
value = 1, type = TokenType.INTEGER
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = pool, type = TokenType.POOL
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = int, type = TokenType.ID
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = (*
    i2a converts an integer to a string.  Positive and negative
	numbers are handled correctly.
*), type = TokenType.COMMENT
value = i2a, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 0, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "0", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = if, type = TokenType.IF
value = 0, type = TokenType.INTEGER
value = <, type = TokenType.LESS_THAN
value = i, type = TokenType.ID
value = then, type = TokenType.THEN
value = i2a_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = ), type = TokenType.RIGHT_PARENTHESIS
value = else, type = TokenType.ELSE
value = "-", type = TokenType.STRING
value = ., type = TokenType.DOT
value = concat, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i2a_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = *, type = TokenType.TIMES
value = ~, type = TokenType.TILDE
value = 1, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = fi, type = TokenType.FI
value = fi, type = TokenType.FI
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = (*
    i2a_aux is an example using recursion.
*), type = TokenType.COMMENT
value = i2a_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = if, type = TokenType.IF
value = i, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 0, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = "", type = TokenType.STRING
value = else, type = TokenType.ELSE
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = next, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = i, type = TokenType.ID
value = /, type = TokenType.OVER
value = 10, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = i2a_aux, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = next, type = TokenType.ID
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ., type = TokenType.DOT
value = concat, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i2c, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = -, type = TokenType.MINUS
value = next, type = TokenType.ID
value = *, type = TokenType.TIMES
value = 10, type = TokenType.INTEGER
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = fi, type = TokenType.FI
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = (*
	this is fibonacci programming using while loop
*), type = TokenType.COMMENT
value = class, type = TokenType.CLASS
value = Main, type = TokenType.TYPE
value = inherits, type = TokenType.INHERITS
value = A2I, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = main, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = Object, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = (, type = TokenType.LEFT_PARENTHESIS
value = new, type = TokenType.NEW
value = IO, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ., type = TokenType.DOT
value = out_string, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i2a, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = fib, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = a2i, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = (, type = TokenType.LEFT_PARENTHESIS
value = new, type = TokenType.NEW
value = IO, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ., type = TokenType.DOT
value = in_string, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ., type = TokenType.DOT
value = concat, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = "\n", type = TokenType.STRING
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = fib, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = i, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = next, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = 0, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = {, type = TokenType.LEFT_CURLY_BRACE
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = f1, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = 0, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = f2, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = 1, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = (, type = TokenType.LEFT_PARENTHESIS
value = let, type = TokenType.LET
value = c, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = <-, type = TokenType.ASSIGN
value = 0, type = TokenType.INTEGER
value = in, type = TokenType.IN
value = while, type = TokenType.WHILE
value = (, type = TokenType.LEFT_PARENTHESIS
value = c, type = TokenType.ID
value = <, type = TokenType.LESS_THAN
value = i, type = TokenType.ID
value = ), type = TokenType.RIGHT_PARENTHESIS
value = loop, type = TokenType.LOOP
value = {, type = TokenType.LEFT_CURLY_BRACE
value = (, type = TokenType.LEFT_PARENTHESIS
value = if, type = TokenType.IF
value = c, type = TokenType.ID
value = =, type = TokenType.EQUAL
value = 1, type = TokenType.INTEGER
value = then, type = TokenType.THEN
value = next, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = c, type = TokenType.ID
value = else, type = TokenType.ELSE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = next, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = f1, type = TokenType.ID
value = +, type = TokenType.PLUS
value = f2, type = TokenType.ID
value = ;, type = TokenType.SEMI_COLON
value = f1, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = f2, type = TokenType.ID
value = ;, type = TokenType.SEMI_COLON
value = f2, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = next, type = TokenType.ID
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = fi, type = TokenType.FI
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = c, type = TokenType.ID
value = <-, type = TokenType.ASSIGN
value = c, type = TokenType.ID
value = +, type = TokenType.PLUS
value = 1, type = TokenType.INTEGER
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = pool, type = TokenType.POOL
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = next, type = TokenType.ID
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = class, type = TokenType.CLASS
value = Test, type = TokenType.TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = class_type, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = var, type = TokenType.ID
value = :, type = TokenType.COLON
value = Bool, type = TokenType.TYPE
value = ), type = TokenType.RIGHT_PARENTHESIS
value = :, type = TokenType.COLON
value = SELF_TYPE, type = TokenType.SELF_TYPE
value = {, type = TokenType.LEFT_CURLY_BRACE
value = case, type = TokenType.CASE
value = var, type = TokenType.ID
value = of, type = TokenType.OF
value = x, type = TokenType.ID
value = :, type = TokenType.COLON
value = Int, type = TokenType.TYPE
value = =>, type = TokenType.BRANCH
value = out_string, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = "Class type is now Int\n", type = TokenType.STRING
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = x2, type = TokenType.ID
value = :, type = TokenType.COLON
value = String, type = TokenType.TYPE
value = =>, type = TokenType.BRANCH
value = out_string, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = "Class type is now String\n", type = TokenType.STRING
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = x3, type = TokenType.ID
value = :, type = TokenType.COLON
value = Bool, type = TokenType.TYPE
value = =>, type = TokenType.BRANCH
value = out_string, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = "Class type is now Bool\n", type = TokenType.STRING
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = o, type = TokenType.ID
value = :, type = TokenType.COLON
value = Object, type = TokenType.TYPE
value = =>, type = TokenType.BRANCH
value = out_string, type = TokenType.ID
value = (, type = TokenType.LEFT_PARENTHESIS
value = "Oooops\n", type = TokenType.STRING
value = ), type = TokenType.RIGHT_PARENTHESIS
value = ;, type = TokenType.SEMI_COLON
value = esac, type = TokenType.ESAC
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON
value = }, type = TokenType.RIGHT_CURLY_BRACE
value = ;, type = TokenType.SEMI_COLON