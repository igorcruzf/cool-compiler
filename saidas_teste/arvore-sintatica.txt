PROGRAM
	CLASS
		class
		FEATURE_LIST
			FEATURE
				c2i
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						char
						:
						String
				)
				:
				Int
				{
				EXPRESSION
					IF_THEN_ELSE
						if
						EXPRESSION
							char
							EXPRESSION_LINE
								=
								EXPRESSION
									EXPRESSION_A
										"0"
						then
						EXPRESSION
							EXPRESSION_A
								0
						else
						EXPRESSION
							IF_THEN_ELSE
								if
								EXPRESSION
									char
									EXPRESSION_LINE
										=
										EXPRESSION
											EXPRESSION_A
												"1"
								then
								EXPRESSION
									EXPRESSION_A
										1
								else
								EXPRESSION
									IF_THEN_ELSE
										if
										EXPRESSION
											char
											EXPRESSION_LINE
												=
												EXPRESSION
													EXPRESSION_A
														"2"
										then
										EXPRESSION
											EXPRESSION_A
												2
										else
										EXPRESSION
											IF_THEN_ELSE
												if
												EXPRESSION
													char
													EXPRESSION_LINE
														=
														EXPRESSION
															EXPRESSION_A
																"3"
												then
												EXPRESSION
													EXPRESSION_A
														3
												else
												EXPRESSION
													IF_THEN_ELSE
														if
														EXPRESSION
															char
															EXPRESSION_LINE
																=
																EXPRESSION
																	EXPRESSION_A
																		"4"
														then
														EXPRESSION
															EXPRESSION_A
																4
														else
														EXPRESSION
															IF_THEN_ELSE
																if
																EXPRESSION
																	char
																	EXPRESSION_LINE
																		=
																		EXPRESSION
																			EXPRESSION_A
																				"5"
																then
																EXPRESSION
																	EXPRESSION_A
																		5
																else
																EXPRESSION
																	IF_THEN_ELSE
																		if
																		EXPRESSION
																			char
																			EXPRESSION_LINE
																				=
																				EXPRESSION
																					EXPRESSION_A
																						"6"
																		then
																		EXPRESSION
																			EXPRESSION_A
																				6
																		else
																		EXPRESSION
																			IF_THEN_ELSE
																				if
																				EXPRESSION
																					char
																					EXPRESSION_LINE
																						=
																						EXPRESSION
																							EXPRESSION_A
																								"7"
																				then
																				EXPRESSION
																					EXPRESSION_A
																						7
																				else
																				EXPRESSION
																					IF_THEN_ELSE
																						if
																						EXPRESSION
																							char
																							EXPRESSION_LINE
																								=
																								EXPRESSION
																									EXPRESSION_A
																										"8"
																						then
																						EXPRESSION
																							EXPRESSION_A
																								8
																						else
																						EXPRESSION
																							IF_THEN_ELSE
																								if
																								EXPRESSION
																									char
																									EXPRESSION_LINE
																										=
																										EXPRESSION
																											EXPRESSION_A
																												"9"
																								then
																								EXPRESSION
																									EXPRESSION_A
																										9
																								else
																								EXPRESSION
																									BLOCK_EXPRESSION
																										{
																										EXPRESSION
																											abort
																											ARGUMENT_LIST_OPT
																												(
																												)
																										;
																										EXPRESSION
																											EXPRESSION_A
																												0
																										;
																										}
																								fi
																						fi
																				fi
																		fi
																fi
														fi
												fi
										fi
								fi
						fi
				}
			;
			FEATURE
				i2c
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						i
						:
						Int
				)
				:
				String
				{
				EXPRESSION
					IF_THEN_ELSE
						if
						EXPRESSION
							i
							EXPRESSION_LINE
								=
								EXPRESSION
									EXPRESSION_A
										0
						then
						EXPRESSION
							EXPRESSION_A
								"0"
						else
						EXPRESSION
							IF_THEN_ELSE
								if
								EXPRESSION
									i
									EXPRESSION_LINE
										=
										EXPRESSION
											EXPRESSION_A
												1
								then
								EXPRESSION
									EXPRESSION_A
										"1"
								else
								EXPRESSION
									IF_THEN_ELSE
										if
										EXPRESSION
											i
											EXPRESSION_LINE
												=
												EXPRESSION
													EXPRESSION_A
														2
										then
										EXPRESSION
											EXPRESSION_A
												"2"
										else
										EXPRESSION
											IF_THEN_ELSE
												if
												EXPRESSION
													i
													EXPRESSION_LINE
														=
														EXPRESSION
															EXPRESSION_A
																3
												then
												EXPRESSION
													EXPRESSION_A
														"3"
												else
												EXPRESSION
													IF_THEN_ELSE
														if
														EXPRESSION
															i
															EXPRESSION_LINE
																=
																EXPRESSION
																	EXPRESSION_A
																		4
														then
														EXPRESSION
															EXPRESSION_A
																"4"
														else
														EXPRESSION
															IF_THEN_ELSE
																if
																EXPRESSION
																	i
																	EXPRESSION_LINE
																		=
																		EXPRESSION
																			EXPRESSION_A
																				5
																then
																EXPRESSION
																	EXPRESSION_A
																		"5"
																else
																EXPRESSION
																	IF_THEN_ELSE
																		if
																		EXPRESSION
																			i
																			EXPRESSION_LINE
																				=
																				EXPRESSION
																					EXPRESSION_A
																						6
																		then
																		EXPRESSION
																			EXPRESSION_A
																				"6"
																		else
																		EXPRESSION
																			IF_THEN_ELSE
																				if
																				EXPRESSION
																					i
																					EXPRESSION_LINE
																						=
																						EXPRESSION
																							EXPRESSION_A
																								7
																				then
																				EXPRESSION
																					EXPRESSION_A
																						"7"
																				else
																				EXPRESSION
																					IF_THEN_ELSE
																						if
																						EXPRESSION
																							i
																							EXPRESSION_LINE
																								=
																								EXPRESSION
																									EXPRESSION_A
																										8
																						then
																						EXPRESSION
																							EXPRESSION_A
																								"8"
																						else
																						EXPRESSION
																							IF_THEN_ELSE
																								if
																								EXPRESSION
																									i
																									EXPRESSION_LINE
																										=
																										EXPRESSION
																											EXPRESSION_A
																												9
																								then
																								EXPRESSION
																									EXPRESSION_A
																										"9"
																								else
																								EXPRESSION
																									BLOCK_EXPRESSION
																										{
																										EXPRESSION
																											abort
																											ARGUMENT_LIST_OPT
																												(
																												)
																										;
																										EXPRESSION
																											EXPRESSION_A
																												""
																										;
																										}
																								fi
																						fi
																				fi
																		fi
																fi
														fi
												fi
										fi
								fi
						fi
				}
			;
			FEATURE
				a2i
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						s
						:
						String
				)
				:
				Int
				{
				EXPRESSION
					IF_THEN_ELSE
						if
						EXPRESSION
							s
							EXPRESSION_LINE
								.
								length
								ARGUMENT_LIST_OPT
									(
									)
								EXPRESSION_LINE
									=
									EXPRESSION
										EXPRESSION_A
											0
						then
						EXPRESSION
							EXPRESSION_A
								0
						else
						EXPRESSION
							IF_THEN_ELSE
								if
								EXPRESSION
									s
									EXPRESSION_LINE
										.
										substr
										ARGUMENT_LIST_OPT
											(
											EXPRESSION
												EXPRESSION_A
													0
											,
											EXPRESSION
												EXPRESSION_A
													1
											)
										EXPRESSION_LINE
											=
											EXPRESSION
												EXPRESSION_A
													"-"
								then
								EXPRESSION
									~
									EXPRESSION
										a2i_aux
										ARGUMENT_LIST_OPT
											(
											EXPRESSION
												s
												EXPRESSION_LINE
													.
													substr
													ARGUMENT_LIST_OPT
														(
														EXPRESSION
															EXPRESSION_A
																1
														,
														EXPRESSION
															s
															EXPRESSION_LINE
																.
																length
																ARGUMENT_LIST_OPT
																	(
																	)
																EXPRESSION_LINE
																	-
																	EXPRESSION
																		EXPRESSION_A
																			1
														)
											)
								else
								EXPRESSION
									IF_THEN_ELSE
										if
										EXPRESSION
											s
											EXPRESSION_LINE
												.
												substr
												ARGUMENT_LIST_OPT
													(
													EXPRESSION
														EXPRESSION_A
															0
													,
													EXPRESSION
														EXPRESSION_A
															1
													)
												EXPRESSION_LINE
													=
													EXPRESSION
														EXPRESSION_A
															"+"
										then
										EXPRESSION
											a2i_aux
											ARGUMENT_LIST_OPT
												(
												EXPRESSION
													s
													EXPRESSION_LINE
														.
														substr
														ARGUMENT_LIST_OPT
															(
															EXPRESSION
																EXPRESSION_A
																	1
															,
															EXPRESSION
																s
																EXPRESSION_LINE
																	.
																	length
																	ARGUMENT_LIST_OPT
																		(
																		)
																	EXPRESSION_LINE
																		-
																		EXPRESSION
																			EXPRESSION_A
																				1
															)
												)
										else
										EXPRESSION
											a2i_aux
											ARGUMENT_LIST_OPT
												(
												EXPRESSION
													s
												)
										fi
								fi
						fi
				}
			;
			FEATURE
				a2i_aux
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						s
						:
						String
				)
				:
				Int
				{
				EXPRESSION
					(
					EXPRESSION
						LET_EXPRESSION
							let
							int
							FORMAL
								:
								Int
								<-
								EXPRESSION
									EXPRESSION_A
										0
							in
							EXPRESSION
								BLOCK_EXPRESSION
									{
									EXPRESSION
										(
										EXPRESSION
											LET_EXPRESSION
												let
												j
												FORMAL
													:
													Int
													<-
													EXPRESSION
														s
														EXPRESSION_LINE
															.
															length
															ARGUMENT_LIST_OPT
																(
																)
												in
												EXPRESSION
													(
													EXPRESSION
														LET_EXPRESSION
															let
															i
															FORMAL
																:
																Int
																<-
																EXPRESSION
																	EXPRESSION_A
																		0
															in
															EXPRESSION
																WHILE
																	while
																	EXPRESSION
																		i
																		EXPRESSION_LINE
																			<
																			EXPRESSION
																				j
																	loop
																	EXPRESSION
																		BLOCK_EXPRESSION
																			{
																			EXPRESSION
																				int
																				<-
																				EXPRESSION
																					int
																					EXPRESSION_LINE
																						*
																						EXPRESSION
																							EXPRESSION_A
																								10
																							EXPRESSION_LINE
																								+
																								EXPRESSION
																									c2i
																									ARGUMENT_LIST_OPT
																										(
																										EXPRESSION
																											s
																											EXPRESSION_LINE
																												.
																												substr
																												ARGUMENT_LIST_OPT
																													(
																													EXPRESSION
																														i
																													,
																													EXPRESSION
																														EXPRESSION_A
																															1
																													)
																										)
																			;
																			EXPRESSION
																				i
																				<-
																				EXPRESSION
																					i
																					EXPRESSION_LINE
																						+
																						EXPRESSION
																							EXPRESSION_A
																								1
																			;
																			}
																	pool
													)
										)
									;
									EXPRESSION
										int
									;
									}
					)
				}
			;
			FEATURE
				i2a
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						i
						:
						Int
				)
				:
				String
				{
				EXPRESSION
					IF_THEN_ELSE
						if
						EXPRESSION
							i
							EXPRESSION_LINE
								=
								EXPRESSION
									EXPRESSION_A
										0
						then
						EXPRESSION
							EXPRESSION_A
								"0"
						else
						EXPRESSION
							IF_THEN_ELSE
								if
								EXPRESSION
									EXPRESSION_A
										0
									EXPRESSION_LINE
										<
										EXPRESSION
											i
								then
								EXPRESSION
									i2a_aux
									ARGUMENT_LIST_OPT
										(
										EXPRESSION
											i
										)
								else
								EXPRESSION
									EXPRESSION_A
										"-"
									EXPRESSION_LINE
										.
										concat
										ARGUMENT_LIST_OPT
											(
											EXPRESSION
												i2a_aux
												ARGUMENT_LIST_OPT
													(
													EXPRESSION
														i
														EXPRESSION_LINE
															*
															EXPRESSION
																~
																EXPRESSION
																	EXPRESSION_A
																		1
													)
											)
								fi
						fi
				}
			;
			FEATURE
				i2a_aux
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						i
						:
						Int
				)
				:
				String
				{
				EXPRESSION
					IF_THEN_ELSE
						if
						EXPRESSION
							i
							EXPRESSION_LINE
								=
								EXPRESSION
									EXPRESSION_A
										0
						then
						EXPRESSION
							EXPRESSION_A
								""
						else
						EXPRESSION
							(
							EXPRESSION
								LET_EXPRESSION
									let
									next
									FORMAL
										:
										Int
										<-
										EXPRESSION
											i
											EXPRESSION_LINE
												/
												EXPRESSION
													EXPRESSION_A
														10
									in
									EXPRESSION
										i2a_aux
										ARGUMENT_LIST_OPT
											(
											EXPRESSION
												next
											)
										EXPRESSION_LINE
											.
											concat
											ARGUMENT_LIST_OPT
												(
												EXPRESSION
													i2c
													ARGUMENT_LIST_OPT
														(
														EXPRESSION
															i
															EXPRESSION_LINE
																-
																EXPRESSION
																	next
																	EXPRESSION_LINE
																		*
																		EXPRESSION
																			EXPRESSION_A
																				10
														)
												)
							)
						fi
				}
			;
		}
		;
	CLASS
		class
		Main
		INHERITANCE
			inherits
			A2I
		{
		FEATURE_LIST
			FEATURE
				main
				(
				)
				:
				Object
				{
				EXPRESSION
					(
					EXPRESSION
						new
						IO
					)
					EXPRESSION_LINE
						.
						out_string
						ARGUMENT_LIST_OPT
							(
							EXPRESSION
								i2a
								ARGUMENT_LIST_OPT
									(
									EXPRESSION
										fib
										ARGUMENT_LIST_OPT
											(
											EXPRESSION
												a2i
												ARGUMENT_LIST_OPT
													(
													EXPRESSION
														(
														EXPRESSION
															new
															IO
														)
														EXPRESSION_LINE
															.
															in_string
															ARGUMENT_LIST_OPT
																(
																)
													)
											)
									)
								EXPRESSION_LINE
									.
									concat
									ARGUMENT_LIST_OPT
										(
										EXPRESSION
											EXPRESSION_A
												"\n"
										)
							)
				}
			;
			FEATURE
				fib
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						i
						:
						Int
				)
				:
				Int
				{
				EXPRESSION
					(
					EXPRESSION
						LET_EXPRESSION
							let
							next
							FORMAL
								:
								Int
								<-
								EXPRESSION
									EXPRESSION_A
										0
							in
							EXPRESSION
								BLOCK_EXPRESSION
									{
									EXPRESSION
										(
										EXPRESSION
											LET_EXPRESSION
												let
												f1
												FORMAL
													:
													Int
													<-
													EXPRESSION
														EXPRESSION_A
															0
												in
												EXPRESSION
													(
													EXPRESSION
														LET_EXPRESSION
															let
															f2
															FORMAL
																:
																Int
																<-
																EXPRESSION
																	EXPRESSION_A
																		1
															in
															EXPRESSION
																(
																EXPRESSION
																	LET_EXPRESSION
																		let
																		c
																		FORMAL
																			:
																			Int
																			<-
																			EXPRESSION
																				EXPRESSION_A
																					0
																		in
																		EXPRESSION
																			WHILE
																				while
																				EXPRESSION
																					(
																					EXPRESSION
																						c
																						EXPRESSION_LINE
																							<
																							EXPRESSION
																								i
																					)
																				loop
																				EXPRESSION
																					BLOCK_EXPRESSION
																						{
																						EXPRESSION
																							(
																							EXPRESSION
																								IF_THEN_ELSE
																									if
																									EXPRESSION
																										c
																										EXPRESSION_LINE
																											=
																											EXPRESSION
																												EXPRESSION_A
																													1
																									then
																									EXPRESSION
																										next
																										<-
																										EXPRESSION
																											c
																									else
																									EXPRESSION
																										BLOCK_EXPRESSION
																											{
																											EXPRESSION
																												next
																												<-
																												EXPRESSION
																													f1
																													EXPRESSION_LINE
																														+
																														EXPRESSION
																															f2
																											;
																											EXPRESSION
																												f1
																												<-
																												EXPRESSION
																													f2
																											;
																											EXPRESSION
																												f2
																												<-
																												EXPRESSION
																													next
																											;
																											}
																									fi
																							)
																						;
																						EXPRESSION
																							c
																							<-
																							EXPRESSION
																								c
																								EXPRESSION_LINE
																									+
																									EXPRESSION
																										EXPRESSION_A
																											1
																						;
																						}
																				pool
																)
													)
										)
									;
									EXPRESSION
										next
									;
									}
					)
				}
			;
		}
		;
	CLASS
		class
		Test
		{
		FEATURE_LIST
			FEATURE
				class_type
				(
				FORMAL_PARAM_LIST
					FORMAL_PARAM
						var
						:
						Bool
				)
				:
				SELF_TYPE
				{
				EXPRESSION
					CASE
						case
						EXPRESSION
							var
						of
						ACTIONS
							ACTION
								x
								:
								Int
								=>
								EXPRESSION
									out_string
									ARGUMENT_LIST_OPT
										(
										EXPRESSION
											EXPRESSION_A
												"Class type is now Int\n"
										)
								;
							ACTION
								x2
								:
								String
								=>
								EXPRESSION
									out_string
									ARGUMENT_LIST_OPT
										(
										EXPRESSION
											EXPRESSION_A
												"Class type is now String\n"
										)
								;
							ACTION
								x3
								:
								Bool
								=>
								EXPRESSION
									out_string
									ARGUMENT_LIST_OPT
										(
										EXPRESSION
											EXPRESSION_A
												"Class type is now Bool\n"
										)
								;
							ACTION
								o
								:
								Object
								=>
								EXPRESSION
									out_string
									ARGUMENT_LIST_OPT
										(
										EXPRESSION
											EXPRESSION_A
												"Oooops\n"
										)
								;
						esac
				}
			;
		}
		;
